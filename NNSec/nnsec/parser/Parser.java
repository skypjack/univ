
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 15 19:35:06 CEST 2007
//----------------------------------------------------

package nnsec.parser;

import java_cup.*;
import java_cup.anttask.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import nnsec.net.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 15 19:35:06 CEST 2007
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\007\005\000\002" +
    "\010\005\000\002\011\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\015\005\000\002\016\005\000" +
    "\002\017\004\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\024\005\000\002\023\005\000\002\025\005" +
    "\000\002\026\005\000\002\027\005\000\002\021\004\000" +
    "\002\021\003\000\002\022\007\000\002\030\005\000\002" +
    "\031\005\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\004\004\001\002\000\012\005\022\006" +
    "\015\007\012\010\017\001\002\000\006\002\010\004\004" +
    "\001\002\000\006\002\uffff\004\uffff\001\002\000\006\002" +
    "\001\004\001\001\002\000\004\002\000\001\002\000\020" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\001\002\000\004\032\121\001\002\000\020\005\022" +
    "\006\015\007\012\010\017\011\032\012\040\013\035\001" +
    "\002\000\020\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\001\002\000\004\032\027\001\002\000" +
    "\020\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\001\002\000\004\032\025\001\002\000\020\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\001\002\000\020\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\001\002\000\004\032\023\001\002" +
    "\000\004\033\024\001\002\000\020\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\001\002\000\004" +
    "\033\026\001\002\000\020\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\001\002\000\004\033\030" +
    "\001\002\000\020\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\001\002\000\012\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\001\002\000\014\007\043\010\051\016" +
    "\055\017\054\020\052\001\002\000\012\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\001\002\000\012\011\032\012\040\013" +
    "\035\014\075\001\002\000\014\007\043\010\051\016\055" +
    "\017\054\020\052\001\002\000\012\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\001\002\000\012\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\001\002\000\014\007\043\010\051\016\055\017" +
    "\054\020\052\001\002\000\020\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\001\002\000\016\007" +
    "\uffe8\010\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8\001\002" +
    "\000\004\032\070\001\002\000\016\007\043\010\051\016" +
    "\055\017\054\020\052\023\067\001\002\000\016\007\uffe6" +
    "\010\uffe6\016\uffe6\017\uffe6\020\uffe6\023\uffe6\001\002\000" +
    "\016\007\uffea\010\uffea\016\uffea\017\uffea\020\uffea\023\uffea" +
    "\001\002\000\016\007\uffe5\010\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\023\uffe5\001\002\000\016\007\uffe9\010\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\023\uffe9\001\002\000\004\032\064\001" +
    "\002\000\004\022\062\001\002\000\016\007\uffe7\010\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\023\uffe7\001\002\000\004\021" +
    "\060\001\002\000\004\021\056\001\002\000\004\033\057" +
    "\001\002\000\016\007\uffe3\010\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\023\uffe3\001\002\000\004\033\061\001\002\000\016" +
    "\007\uffe4\010\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\001" +
    "\002\000\004\033\063\001\002\000\016\007\uffe0\010\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\023\uffe0\001\002\000\004\033" +
    "\065\001\002\000\016\007\uffe1\010\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\023\uffe1\001\002\000\016\007\uffeb\010\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\023\uffeb\001\002\000\012\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\001\002\000\004\033\071\001" +
    "\002\000\016\007\uffe2\010\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\023\uffe2\001\002\000\016\007\043\010\051\016\055\017" +
    "\054\020\052\023\073\001\002\000\012\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\001\002\000\012\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\001\002\000\004\025\102\001\002\000\006" +
    "\014\075\015\101\001\002\000\006\014\uffde\015\uffde\001" +
    "\002\000\006\014\uffdf\015\uffdf\001\002\000\006\002\ufffe" +
    "\004\ufffe\001\002\000\004\027\115\001\002\000\004\024" +
    "\104\001\002\000\004\027\113\001\002\000\004\026\107" +
    "\001\002\000\004\031\112\001\002\000\004\030\110\001" +
    "\002\000\004\033\111\001\002\000\004\031\uffda\001\002" +
    "\000\006\014\uffdd\015\uffdd\001\002\000\004\033\114\001" +
    "\002\000\004\026\uffdc\001\002\000\004\033\116\001\002" +
    "\000\004\024\uffdb\001\002\000\016\007\043\010\051\016" +
    "\055\017\054\020\052\023\120\001\002\000\012\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\001\002\000\004\033\122\001" +
    "\002\000\020\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\002\004\003\005\001\001\000\016\004" +
    "\012\005\017\006\010\007\015\010\020\011\013\001\001" +
    "\000\004\003\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\040\006\010\007\015\010\020\011\013\012" +
    "\033\013\035\014\030\015\032\016\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\116\020\045\023\041\024\047\025" +
    "\052\026\044\027\046\001\001\000\002\001\001\000\016" +
    "\013\073\014\030\015\032\016\036\021\075\022\076\001" +
    "\001\000\020\017\071\020\045\023\041\024\047\025\052" +
    "\026\044\027\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\043\020\045\023\041\024\047\025\052" +
    "\026\044\027\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\065\023\041\024\047" +
    "\025\052\026\044\027\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\065\023\041\024\047\025\052\026\044" +
    "\027\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\102\001\001\000\004\022\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\104\001\001\000\002\001\001\000\004" +
    "\032\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\065\023\041\024\047\025\052\026\044" +
    "\027\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/** Neural network reference. */
	private NetIFace net;

	/** Nodes pool. */
	private HashMap<Integer, NetIFace.Node> store;

	/** Group identifier for the node under construction. */
	private int actNodeGID;

	/** Node identifier for the node under construction. */
	private int actNodeID;

	/** Node related activation function for the node under construction. */
	private String actNodeActvFunction;

	/** Node related output function for the node under construction. */
	private String actNodeOutFunction;

	/** Node related threshold for the node under construction. */
	private double actNodeThreshold;

	/**
	 * Constructs a Parser with the specified Reader.
	 * @param input the specified Reader.
	 */
	public Parser(java.io.Reader input) {
 		super(new Lexer(input));
		net = new Net();
		store = new HashMap<Integer, NetIFace.Node>();
		actNodeGID = -1;
		actNodeID = -1;
		actNodeActvFunction = null;
		actNodeOutFunction = null;
		actNodeThreshold = 0;
 	}

	/**
	 * This method returns the neural netowrk reference.
	 * @return neural network reference.
	 */
	public NetIFace getNet() {
		return net;
	}

	/**
	 * This method sets the group identifier for the node under
	 * construction.
	 * @param gid node group identifier.
	 */
	public void setActNodeGID(Integer gid) {
		actNodeGID = gid;
	}

	/**
	 * This method sets the node identifier for the node under construction.
	 * @param id node identifier.
	 */
	public void setActNodeID(Integer id) {
		actNodeID = id;
	}

	/**
	 * This method permits to set the activation function for the node under
	 * construction.
	 * @param func activation function.
	 */
	public void setActNodeActvFunction(String func) {
		actNodeActvFunction = func;
	}

	/**
	 * This method permits to set the output function for the node under
	 * construction.
	 * @param func output function.
	 */
	public void setActNodeOutFunction(String func) {
		actNodeOutFunction = func;
	}

	/**
	 * This method permits to set the threshold for the node unde
	 * construction.
	 * @param th node threshold
	 */
	public void setActNodeThreshold(double th) {
		actNodeThreshold = th;
	}

	/**
	 * This method permits to set the name for the net under construction.
	 * @param name name of the net.
	 */
	public void setNetName(String name) {
		net.setName(name);
	}

	/**
	 * This method permits to set the description for the net under
	 * construction.
	 * @param desc net description.
	 */
	public void setNetDescription(String desc) {
		net.setDescription(desc);
	}

	/**
	 * This method permits to set the default activation function for the
	 * net under construction.
	 * @param func neural network default activation function.
	 */
	public void setNetDefaultActvFunction(String func) {
		net.setDefaultActvFunction(func);
	}

	/**
	 * This method permits to set the default output function for the
	 * net under construction.
	 * @param func neural network default output function.
	 */
	public void setNetDefaultOutFunction(String func) {
		net.setDefaultOutFunction(func);
	}

	/**
	 * This method permits to put the node under construction into the nodes
	 * pool, for a consequent reclaim.
	 * @param ivalue node identifier value (useful for consequent search
	 * 	operation).
	 * @param node node reference.
	 */
	private void put(Integer ivalue, NetIFace.Node node) {
		store.put(ivalue, node);
	}

	/**
	 * This method permits to retrieve node from nodes pool, by identifier.
	 * @param ivalue node identifier.
	 * @return node reference.
	 */
	public NetIFace.Node get(Integer ivalue) {
		return store.get(ivalue);
	}

	/**
	 * This method constructs a node, based on stored informations.
	 * @return node reference.
	 */
	private NetIFace.Node makeActNode() {
		NetIFace.Node node = null;
		if(actNodeID >= 0) {
			if(actNodeGID >=0)
				node = new NetIFace.Node(actNodeGID);
			else node = new NetIFace.Node();
			if(actNodeActvFunction != null)
				node.setAssociatedActvFunction(actNodeActvFunction);
			if(actNodeOutFunction != null)
				node.setAssociatedOutFunction(actNodeOutFunction);
			if(actNodeThreshold != 0)
				node.setThreshold(actNodeThreshold);
			put(new Integer(actNodeID), node);
		}
		actNodeID = -1;
		actNodeGID = -1;
		actNodeActvFunction = null;
		actNodeOutFunction = null;
		actNodeThreshold = 0;
		return node;
	}

	/**
	 * This method permits to add a node to the neural network input layer.
	 */
	public void addInputNode() {
		NetIFace.Node inode = makeActNode();
		if(inode != null)
			net.addInputNode(inode);
	}

	/**
	 * This method permits to add a node to the neural network hidden layer.
	 */
	public void addHiddenNode() {
		NetIFace.Node hnode = makeActNode();
		if(hnode != null)
			net.addHiddenNode(hnode);
	}

	/**
	 * This method permits to add a node to the neural network output layer.
	 */
	public void addOutputNode() {
		NetIFace.Node onode = makeActNode();
		if(onode != null)
			net.addOutputNode(onode);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // weight ::= LINK_WEIGHT WEIGHT_VALUE END_TERM 
            {
              Double RESULT =null;
		int weightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int weightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double weight = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = weight; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("weight",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // output_ref ::= LINK_OUTPUT_NODE_ID NODE_ID_VALUE END_TERM 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_ref",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // input_ref ::= LINK_INPUT_NODE_ID NODE_ID_VALUE END_TERM 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input_ref",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // link_expr ::= LINK_SEC output_ref input_ref weight LINK_SEC_END 
            {
              Object RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer oid = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int iidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer iid = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double wval = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				NetIFace.Node input = parser.get(iid);
				NetIFace.Node output = parser.get(oid);
				if((input != null) && (output != null)) {
					NetIFace.Link link = new NetIFace.Link(output, input, wval.doubleValue());
					input.addInputLink(link);
					output.addOutputLink(link);
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // link ::= link_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // link ::= link link_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // threshold ::= THRESHOLD THRESHOLD_VALUE END_TERM 
            {
              Double RESULT =null;
		int thvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int thvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double thvalue = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setActNodeThreshold(thvalue.doubleValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("threshold",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nodeoutfunc ::= OUTF STRING END_TERM 
            {
              String RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setActNodeOutFunction(function); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeoutfunc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nodeactvfunc ::= ACTVF STRING END_TERM 
            {
              String RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setActNodeActvFunction(function); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeactvfunc",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id ::= NODE_ID ID_VALUE END_TERM 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setActNodeID(id.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gid ::= GROUP_ID ID_VALUE END_TERM 
            {
              Integer RESULT =null;
		int gidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer gid = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setActNodeGID(gid.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gid",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // node_token ::= threshold 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_token",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // node_token ::= nodeoutfunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_token",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // node_token ::= nodeactvfunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_token",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // node_token ::= id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_token",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // node_token ::= gid 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_token",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // node_tokens ::= node_token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_tokens",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // node_tokens ::= node_tokens node_token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_tokens",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // onode ::= O_NODE_SEC node_tokens NODE_SEC_END 
            {
              Object RESULT =null;
		 parser.addOutputNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // hnode ::= H_NODE_SEC node_tokens NODE_SEC_END 
            {
              Object RESULT =null;
		 parser.addHiddenNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hnode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inode ::= I_NODE_SEC node_tokens NODE_SEC_END 
            {
              Object RESULT =null;
		 parser.addInputNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // node_expr ::= onode 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // node_expr ::= hnode 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // node_expr ::= inode 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // node ::= node_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // node ::= node node_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // outfunc ::= OUTF STRING END_TERM 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setNetDefaultOutFunction(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outfunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // actvfunc ::= ACTVF STRING END_TERM 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setNetDefaultActvFunction(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actvfunc",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // desc ::= DESC STRING END_TERM 
            {
              Object RESULT =null;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setNetDescription(desc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // name ::= NAME STRING END_TERM 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.setNetName(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // net_token ::= outfunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_token",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // net_token ::= actvfunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_token",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // net_token ::= desc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_token",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // net_token ::= name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_token",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // net_tokens ::= net_token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_tokens",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // net_tokens ::= net_tokens net_token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_tokens",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // net_expr ::= NET_SEC net_tokens node link NET_SEC_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // net_list ::= net_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= net_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // net_list ::= net_list net_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("net_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

