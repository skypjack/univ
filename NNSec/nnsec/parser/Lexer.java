/* The following code was generated by JFlex 1.4.1 on 15/09/07 19.35 */

/**
 * Lexer class. Objects of this type tokenizes an information streams.
 */

package nnsec.parser;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15/09/07 19.35 from the specification file
 * <tt>parser/lexer.l</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int I_NODE_SEC = 2;
  public static final int NET_SEC = 1;
  public static final int LINK_SEC = 5;
  public static final int O_NODE_SEC = 4;
  public static final int YYINITIAL = 0;
  public static final int H_NODE_SEC = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\42\1\0\1\2\1\1\22\0\1\11\12\0\1\4"+
    "\1\0\1\4\1\7\1\0\12\6\1\0\1\14\1\0\1\3\3\0"+
    "\32\10\6\0\1\20\1\10\1\24\1\22\1\16\1\40\1\36\1\33"+
    "\1\26\1\10\1\35\1\34\1\21\1\15\1\30\1\27\1\10\1\25"+
    "\1\23\1\17\1\32\1\31\1\41\1\10\1\37\1\10\1\12\1\5"+
    "\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\4\1\2\2\1\3\1\4\7\2\1\0\2\1"+
    "\1\5\1\6\1\1\1\0\2\1\1\5\6\2\4\1"+
    "\1\7\1\10\4\1\3\0\2\3\2\4\11\2\1\0"+
    "\2\6\2\0\1\11\5\2\2\0\1\12\2\10\6\0"+
    "\12\2\1\13\4\2\1\0\1\14\5\0\1\15\6\2"+
    "\1\0\1\16\7\2\4\0\2\15\1\0\1\17\1\0"+
    "\1\20\6\2\2\0\1\2\1\21\2\2\1\22\1\0"+
    "\1\2\2\0\1\2\1\23\2\0\1\2\1\24\2\0"+
    "\1\2\1\25\2\21\1\2\1\0\1\26\1\0\1\2"+
    "\2\23\2\24\2\25\1\2\1\27\5\2\1\0\1\30"+
    "\1\2\1\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u0118\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u02df\0\u038e\0\u03b1\0\u03d4\0\u03f7"+
    "\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u04c9"+
    "\0\u0627\0\u013b\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9"+
    "\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0302"+
    "\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906"+
    "\0\u0929\0\u094c\0\u04ec\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13"+
    "\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b"+
    "\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43"+
    "\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b"+
    "\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73"+
    "\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b"+
    "\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3"+
    "\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3"+
    "\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb"+
    "\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603"+
    "\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b"+
    "\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833"+
    "\0\u1856";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\7\1\10\24\7\1\0\1\7\1\11\1\12\2\7"+
    "\1\11\1\13\1\7\1\13\1\14\1\7\1\15\1\16"+
    "\1\17\2\13\1\20\1\13\1\21\3\13\1\22\1\13"+
    "\1\23\2\13\1\24\1\25\5\13\1\26\1\7\1\27"+
    "\1\30\2\7\1\27\1\31\2\7\1\30\1\7\1\32"+
    "\1\16\11\7\1\33\13\7\1\34\1\7\1\27\1\30"+
    "\1\7\1\35\1\36\1\37\1\7\1\13\1\40\1\7"+
    "\1\32\1\16\2\13\1\41\1\20\5\13\1\42\1\13"+
    "\1\43\3\13\1\44\1\13\1\45\3\13\1\34\1\7"+
    "\1\27\1\30\1\7\1\35\1\36\1\37\1\7\1\13"+
    "\1\40\1\7\1\32\1\16\2\13\1\41\1\20\5\13"+
    "\1\42\1\13\1\43\11\13\1\34\1\7\1\46\1\47"+
    "\1\7\1\50\1\51\1\52\2\7\1\47\1\7\1\53"+
    "\1\16\2\7\1\54\13\7\1\55\4\7\1\56\1\57"+
    "\1\60\61\0\1\61\25\0\1\26\3\0\1\26\5\0"+
    "\1\15\1\16\25\0\1\26\2\0\1\62\6\0\1\62"+
    "\1\0\1\15\1\16\34\0\1\13\1\0\2\13\3\0"+
    "\25\13\3\0\1\62\3\0\1\13\1\0\1\13\1\14"+
    "\1\0\1\15\1\16\25\13\2\0\1\63\1\64\2\0"+
    "\1\63\3\0\1\64\30\0\1\63\1\0\1\65\1\66"+
    "\2\0\1\65\3\0\1\66\30\0\1\65\6\0\1\13"+
    "\1\0\2\13\3\0\3\13\1\67\21\13\7\0\1\13"+
    "\1\0\2\13\3\0\7\13\1\70\15\13\7\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\71\23\13\7\0\1\13"+
    "\1\0\2\13\3\0\1\72\24\13\7\0\1\13\1\0"+
    "\2\13\3\0\1\73\14\13\1\74\7\13\7\0\1\13"+
    "\1\0\2\13\3\0\1\75\10\13\1\76\13\13\7\0"+
    "\1\13\1\0\2\13\3\0\11\13\1\77\13\13\2\0"+
    "\1\34\3\0\1\34\5\0\1\32\1\16\25\0\1\34"+
    "\2\0\1\100\6\0\1\100\1\0\1\32\1\16\34\0"+
    "\1\31\35\0\1\101\1\102\2\0\1\101\3\0\1\102"+
    "\30\0\1\101\22\0\1\103\26\0\1\104\35\0\1\34"+
    "\3\0\1\34\1\104\4\0\1\32\1\16\25\0\1\34"+
    "\6\0\1\37\1\105\2\13\3\0\25\13\3\0\1\100"+
    "\3\0\1\13\1\0\1\13\1\40\1\0\1\32\1\16"+
    "\25\13\7\0\1\13\1\0\2\13\3\0\16\13\1\106"+
    "\6\13\7\0\1\13\1\0\2\13\3\0\5\13\1\107"+
    "\17\13\7\0\1\13\1\0\2\13\3\0\15\13\1\110"+
    "\7\13\7\0\1\13\1\0\2\13\3\0\3\13\1\111"+
    "\21\13\7\0\1\13\1\0\2\13\3\0\10\13\1\112"+
    "\14\13\2\0\1\60\3\0\1\60\5\0\1\53\1\16"+
    "\25\0\1\60\2\0\1\113\6\0\1\113\1\0\1\53"+
    "\1\16\34\0\1\114\35\0\1\60\3\0\1\60\1\114"+
    "\4\0\1\53\1\16\25\0\1\60\6\0\1\52\1\115"+
    "\34\0\1\116\1\117\2\0\1\116\3\0\1\117\30\0"+
    "\1\116\15\0\1\120\12\0\1\121\27\0\1\122\52\0"+
    "\1\123\33\0\1\124\43\0\1\125\24\0\1\63\3\0"+
    "\1\63\34\0\1\63\2\0\1\64\6\0\1\64\32\0"+
    "\1\65\3\0\1\65\34\0\1\65\2\0\1\66\6\0"+
    "\1\66\37\0\1\13\1\0\2\13\3\0\4\13\1\126"+
    "\20\13\7\0\1\13\1\0\2\13\3\0\2\13\1\127"+
    "\22\13\7\0\1\13\1\0\2\13\3\0\6\13\1\130"+
    "\16\13\7\0\1\13\1\0\2\13\3\0\12\13\1\131"+
    "\1\132\11\13\7\0\1\13\1\0\2\13\3\0\13\13"+
    "\1\133\11\13\7\0\1\13\1\0\2\13\3\0\2\13"+
    "\1\134\22\13\7\0\1\13\1\0\2\13\3\0\13\13"+
    "\1\135\11\13\7\0\1\13\1\0\2\13\3\0\5\13"+
    "\1\136\17\13\7\0\1\13\1\0\2\13\3\0\1\137"+
    "\24\13\2\0\1\101\3\0\1\101\34\0\1\101\2\0"+
    "\1\102\6\0\1\102\33\0\1\103\1\140\5\0\1\103"+
    "\37\0\1\104\1\105\41\0\1\105\42\0\1\13\1\0"+
    "\2\13\3\0\10\13\1\141\14\13\3\0\1\103\1\140"+
    "\2\0\1\13\1\0\1\13\1\107\3\0\25\13\7\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\142\22\13\7\0"+
    "\1\13\1\0\2\13\3\0\22\13\1\143\2\13\7\0"+
    "\1\13\1\0\2\13\3\0\13\13\1\144\11\13\7\0"+
    "\1\114\1\115\41\0\1\115\35\0\1\116\3\0\1\116"+
    "\34\0\1\116\2\0\1\117\6\0\1\117\61\0\1\145"+
    "\14\0\1\121\1\146\5\0\1\121\61\0\1\147\42\0"+
    "\1\150\40\0\1\151\15\0\1\152\1\153\2\0\1\152"+
    "\3\0\1\153\1\154\27\0\1\152\6\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\155\23\13\7\0\1\13\1\0"+
    "\2\13\3\0\14\13\1\156\10\13\7\0\1\13\1\0"+
    "\2\13\3\0\7\13\1\157\15\13\7\0\1\13\1\0"+
    "\2\13\3\0\15\13\1\160\7\13\7\0\1\13\1\0"+
    "\2\13\3\0\5\13\1\161\17\13\7\0\1\13\1\0"+
    "\2\13\3\0\5\13\1\162\17\13\3\0\1\163\1\164"+
    "\2\0\1\13\1\0\1\13\1\142\3\0\12\13\1\165"+
    "\12\13\7\0\1\13\1\0\2\13\3\0\5\13\1\166"+
    "\17\13\7\0\1\13\1\0\2\13\3\0\5\13\1\167"+
    "\17\13\7\0\1\13\1\0\2\13\3\0\20\13\1\170"+
    "\4\13\3\0\1\140\6\0\1\140\37\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\171\23\13\3\0\1\163\1\164"+
    "\2\0\1\13\1\0\1\13\1\142\3\0\25\13\7\0"+
    "\1\13\1\0\2\13\3\0\1\13\1\172\23\13\7\0"+
    "\1\13\1\0\2\13\3\0\15\13\1\173\7\13\23\0"+
    "\1\174\22\0\1\146\6\0\1\146\53\0\1\175\41\0"+
    "\1\176\57\0\1\177\5\0\1\152\3\0\1\152\4\0"+
    "\1\154\27\0\1\152\2\0\1\153\6\0\1\153\1\154"+
    "\31\0\1\200\1\201\2\0\1\200\3\0\1\201\30\0"+
    "\1\200\2\0\1\202\1\203\2\0\1\13\1\0\1\13"+
    "\1\155\3\0\25\13\3\0\1\204\1\205\2\0\1\13"+
    "\1\0\1\13\1\156\3\0\25\13\7\0\1\13\1\0"+
    "\2\13\3\0\10\13\1\206\14\13\7\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\207\22\13\7\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\207\23\13\7\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\210\23\13\3\0\1\163\1\164"+
    "\5\0\1\163\33\0\1\164\6\0\1\164\37\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\211\7\13\7\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\212\23\13\7\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\213\23\13\2\0\1\214"+
    "\1\215\2\0\1\214\1\13\1\0\1\13\1\216\1\217"+
    "\2\0\25\13\1\214\6\0\1\13\1\0\2\13\3\0"+
    "\6\13\1\220\16\13\7\0\1\13\1\0\2\13\3\0"+
    "\10\13\1\221\14\13\7\0\1\13\1\0\2\13\3\0"+
    "\12\13\1\221\12\13\17\0\1\176\42\0\1\121\26\0"+
    "\1\176\1\222\5\0\1\176\64\0\1\223\10\0\1\200"+
    "\3\0\1\200\34\0\1\200\2\0\1\201\6\0\1\201"+
    "\33\0\1\202\1\203\5\0\1\202\33\0\1\203\6\0"+
    "\1\203\33\0\1\204\1\205\5\0\1\204\33\0\1\205"+
    "\6\0\1\205\37\0\1\13\1\0\2\13\3\0\11\13"+
    "\1\224\13\13\2\0\1\225\1\226\2\0\1\225\1\13"+
    "\1\0\1\13\1\227\1\230\2\0\25\13\1\225\1\0"+
    "\1\231\1\232\2\0\1\231\1\13\1\0\1\13\1\233"+
    "\1\234\2\0\25\13\1\231\6\0\1\13\1\0\2\13"+
    "\3\0\2\13\1\210\22\13\2\0\1\235\1\236\2\0"+
    "\1\235\1\13\1\0\1\13\1\237\1\240\2\0\25\13"+
    "\1\235\6\0\1\13\1\0\2\13\3\0\1\212\24\13"+
    "\2\0\1\214\3\0\1\214\4\0\1\217\27\0\1\214"+
    "\2\0\1\215\6\0\1\215\1\217\32\0\1\215\3\0"+
    "\1\13\1\0\1\13\1\216\1\217\2\0\25\13\2\0"+
    "\1\241\1\242\2\0\1\241\3\0\1\242\30\0\1\241"+
    "\6\0\1\13\1\0\2\13\3\0\16\13\1\243\6\13"+
    "\3\0\1\244\1\245\2\0\1\13\1\0\1\13\1\221"+
    "\3\0\25\13\3\0\1\222\6\0\1\222\50\0\1\246"+
    "\31\0\1\13\1\0\2\13\3\0\12\13\1\247\12\13"+
    "\2\0\1\225\3\0\1\225\4\0\1\230\27\0\1\225"+
    "\2\0\1\226\6\0\1\226\1\230\32\0\1\226\3\0"+
    "\1\13\1\0\1\13\1\227\1\230\2\0\25\13\2\0"+
    "\1\250\1\251\2\0\1\250\3\0\1\251\30\0\1\250"+
    "\1\0\1\231\3\0\1\231\4\0\1\234\27\0\1\231"+
    "\2\0\1\232\6\0\1\232\1\234\32\0\1\232\3\0"+
    "\1\13\1\0\1\13\1\233\1\234\2\0\25\13\2\0"+
    "\1\252\1\253\2\0\1\252\3\0\1\253\30\0\1\252"+
    "\1\0\1\235\3\0\1\235\4\0\1\240\27\0\1\235"+
    "\2\0\1\236\6\0\1\236\1\240\32\0\1\236\3\0"+
    "\1\13\1\0\1\13\1\237\1\240\2\0\25\13\2\0"+
    "\1\254\1\255\2\0\1\254\3\0\1\255\30\0\1\254"+
    "\1\0\1\241\3\0\1\241\34\0\1\241\2\0\1\242"+
    "\6\0\1\242\37\0\1\13\1\0\2\13\3\0\13\13"+
    "\1\256\11\13\3\0\1\244\1\245\5\0\1\244\33\0"+
    "\1\245\6\0\1\245\33\0\1\246\1\257\5\0\1\246"+
    "\37\0\1\13\1\0\2\13\3\0\2\13\1\260\22\13"+
    "\2\0\1\250\3\0\1\250\34\0\1\250\2\0\1\251"+
    "\6\0\1\251\32\0\1\252\3\0\1\252\34\0\1\252"+
    "\2\0\1\253\6\0\1\253\32\0\1\254\3\0\1\254"+
    "\34\0\1\254\2\0\1\255\6\0\1\255\37\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\261\5\13\3\0\1\257"+
    "\6\0\1\257\37\0\1\13\1\0\2\13\3\0\11\13"+
    "\1\262\13\13\7\0\1\13\1\0\2\13\3\0\5\13"+
    "\1\263\17\13\7\0\1\13\1\0\2\13\3\0\13\13"+
    "\1\264\11\13\3\0\1\265\1\266\2\0\1\13\1\0"+
    "\1\13\1\263\3\0\25\13\7\0\1\13\1\0\2\13"+
    "\3\0\1\267\24\13\3\0\1\265\1\266\5\0\1\265"+
    "\33\0\1\266\6\0\1\266\33\0\1\270\1\271\2\0"+
    "\1\13\1\0\1\13\1\267\3\0\25\13\3\0\1\270"+
    "\1\271\5\0\1\270\33\0\1\271\6\0\1\271\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6265];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\16\1\1\0\5\1\1\0\23\1\3\0"+
    "\15\1\1\0\2\1\2\0\6\1\2\0\3\1\6\0"+
    "\17\1\1\0\1\1\5\0\7\1\1\0\10\1\4\0"+
    "\2\1\1\0\1\1\1\0\7\1\2\0\5\1\1\0"+
    "\1\1\2\0\2\1\2\0\2\1\2\0\5\1\1\0"+
    "\1\1\1\0\16\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 104) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return new java_cup.runtime.Symbol(Sym.ACTVF);
          }
        case 26: break;
        case 20: 
          { yybegin(O_NODE_SEC);
							return new java_cup.runtime.Symbol(Sym.O_NODE_SEC);
          }
        case 27: break;
        case 19: 
          { yybegin(I_NODE_SEC);
							return new java_cup.runtime.Symbol(Sym.I_NODE_SEC);
          }
        case 28: break;
        case 24: 
          { return new java_cup.runtime.Symbol(Sym.THRESHOLD);
          }
        case 29: break;
        case 8: 
          { yybegin(NET_SEC);
							return new java_cup.runtime.Symbol(Sym.LINK_SEC_END);
          }
        case 30: break;
        case 10: 
          { return new java_cup.runtime.Symbol(Sym.WEIGHT_VALUE, new Double(yytext()));
          }
        case 31: break;
        case 13: 
          { yybegin(NET_SEC);
							return new java_cup.runtime.Symbol(Sym.NET_SEC);
          }
        case 32: break;
        case 25: 
          { return new java_cup.runtime.Symbol(Sym.DESC);
          }
        case 33: break;
        case 15: 
          { return new java_cup.runtime.Symbol(Sym.NAME);
          }
        case 34: break;
        case 14: 
          { return new java_cup.runtime.Symbol(Sym.OUTF);
          }
        case 35: break;
        case 18: 
          { return new java_cup.runtime.Symbol(Sym.LINK_OUTPUT_NODE_ID);
          }
        case 36: break;
        case 23: 
          { return new java_cup.runtime.Symbol(Sym.LINK_WEIGHT);
          }
        case 37: break;
        case 2: 
          { return new java_cup.runtime.Symbol(Sym.STRING, new String(yytext()));
          }
        case 38: break;
        case 21: 
          { yybegin(H_NODE_SEC);
							return new java_cup.runtime.Symbol(Sym.H_NODE_SEC);
          }
        case 39: break;
        case 11: 
          { return new java_cup.runtime.Symbol(Sym.NODE_ID);
          }
        case 40: break;
        case 5: 
          { return new java_cup.runtime.Symbol(Sym.ID_VALUE, new Integer(yytext()));
          }
        case 41: break;
        case 7: 
          { return new java_cup.runtime.Symbol(Sym.NODE_ID_VALUE, new Integer(yytext()));
          }
        case 42: break;
        case 9: 
          { return new java_cup.runtime.Symbol(Sym.THRESHOLD_VALUE, new Double(yytext()));
          }
        case 43: break;
        case 17: 
          { yybegin(LINK_SEC);
							return new java_cup.runtime.Symbol(Sym.LINK_SEC);
          }
        case 44: break;
        case 4: 
          { return new java_cup.runtime.Symbol(Sym.END_TERM);
          }
        case 45: break;
        case 3: 
          { yybegin(YYINITIAL);
							return new java_cup.runtime.Symbol(Sym.NET_SEC_END);
          }
        case 46: break;
        case 12: 
          { return new java_cup.runtime.Symbol(Sym.LINK_INPUT_NODE_ID);
          }
        case 47: break;
        case 6: 
          { yybegin(NET_SEC);
							return new java_cup.runtime.Symbol(Sym.NODE_SEC_END);
          }
        case 48: break;
        case 22: 
          { return new java_cup.runtime.Symbol(Sym.GROUP_ID);
          }
        case 49: break;
        case 1: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
