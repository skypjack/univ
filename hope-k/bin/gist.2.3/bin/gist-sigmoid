#! /usr/bin/perl
# -* perl *-
# FILE: fit-sigmoid
# AUTHOR: William Stafford Noble
# CREATE DATE: 05/21/02
# PROJECT: SVM
# DESCRIPTION: Fit a sigmoid to SVM outputs.  Based upon pseudocode
#              given in "Probabilistic outputs for support vector machines
#              and comparison to regularized likelihood methods" by Platt.

$usage = "USAGE: gist-sigmoid <labels> <train> <predictions>\n";

# Parse the command line.
if (scalar(@ARGV) != 3) {
  print(STDERR $usage);
  exit(1);
}
($labels, $train, $predictions) = @ARGV;

# Read the true labels.
($header, $titles, @target) = &read_file_column(1, $labels);

# Read the training set.
($header, $titles, @out) = &read_file_column(2, $train);

# Read the predictions.
($header, $titles, @predictions) = &read_file_column(2, $predictions);

# Read the row names.
($header, $titles, @names) = &read_file_column(0, $predictions);

# Count the number of positives and negatives.
$prior1 = 0;
$prior0 = 0;
foreach $target (@target) {
  if ($target == 1) {
    $prior1++;
  } elsif ($target == -1) {
    $prior0++;
  } else {
    die("Invalid class label ($target).");
  }
}
print(STDERR "prior1=$prior1 prior0=$prior0\n");

# BEGIN PLATT PSEUDOCODE

# Input parameters:
#   out = array of SVM outputs
#   target = array of Booleans : is ith example a positive example?
#   prior1 = number of positive examples
#   prior0 = number of negative examples
# Outputs:
#   A, B = parameters of sigmoid

$A = 0;
$B = log(($prior0 + 1)/($prior1 + 1));
$hiTarget = ($prior1 + 1) / ($prior1 + 2);
$loTarget = 1 / ($prior0 + 2);
$lambda = 1e-3;
$olderr = 1e300;
$len = $prior0 + $prior1; # Added by WSN.

# pp = temp array to store current estimate of probabilities
# set all pp elements to (prior1 + 1) / (prior0 + prior1 + 2)
for ($i = 0; $i < $len; $i++){
  $pp[$i] = ($prior1 + 1) / ($prior0 + $prior1 + 2);
}

$count = 0;
for ($it = 1; $it < 100; $it++) {

  $a = 0; 
  $b = 0;
  $c = 0;
  $d = 0;
  $e = 0;

  # First, compute Hessian and gradient of error function w.r.t A and B.
  for ($i = 0; $i < $len; $i++) {
    if ($target[$i] == 1) {
      $t = $hiTarget;
    } else {
      $t = $loTarget;
    }
    $d1 = $pp[$i] - $t;
    $d2 = $pp[$i] * (1 - $pp[$i]);
    $a += $out[$i] * $out[$i] * $d2;
    $b += $d2;
    $c += $out[$i] * $d2;
    $d += $out[$i] * $d1;
    $e += $d1;
  }

  # If gradient is really tiny, then stop.
  if ((abs($d) < 1e-9) && (abs($e) < 1e-9)) {
    last;
  }
  $oldA = $A;
  $oldB = $B;
  $err = 0;

  # Loop until goodness of fit increases.
  while (1) {
    $det = ($a + $lambda) * ($b + $lambda) - ($c * $c);

    # If determinant of Hessian is zero, increase stabilizer.
    if ($det == 0) { 
      $lambda *= 10;
      # print(STDERR "Increasing lambda ($lambda) because determinant = 0.\n");
      next;
    }

    $A = $oldA + (($b + $lambda) * $d - $c * $e) / $det;
    $B = $oldB + (($a + $lambda) * $e - $c * $d) / $det;

    # Now, compute goodness of fit.
    $err = 0;
    for ($i = 0; $i < $len; $i++) {
      $p = 1/(1 + exp($out[$i] * $A + $B));
      $pp[$i] = $p;
      # At this step, make sure log(0) returns -200;
      $err -= $t * log($p) + (1 - $t) * log(1 - $p);
    }
    if ($err < $olderr * (1 + 1e-7)) {
      $lambda *= 0.1;
      # print(STDERR "Decreasing lambda ($lambda).\n");
      last;
    }

    # Error did not decrease: increase stabilizer by factor of 10 & try again
    $lambda *= 10;
    # print(STDERR "Increasing lambda ($lambda) - error did not decrease.\n");
    if ($lambda >= 1e12) { # Something is broken.  Give up.
      die("lambda ($lambda) >= 1e6");
    }
  }

  $diff = $err - $olderr;
  printf(STDERR "Iteration $it: error=%g delta=%g\n", $err, $diff);
  $scale = 0.5 * ($err + $olderr + 1);
  if (($diff > -1e-3 * $scale) && ($diff < 1e-7 * $scale)) {
    $count++;
  } else {
    $count = 0;
  }
  $olderr = $err;
  if ($count == 3) {
    last;
  }
}

# END PLATT PSEUDOCODE.
printf(STDERR "A=%g B=%g Error=%g\n", $A, $B, $err);

# Print the output, with probabilities in the last column.
print($header);
printf("# A=%g B=%g Error=%g\n", $A, $B, $err);
chomp($titles);
printf("$titles\tprobability\n");
for ($i = 0; $i < scalar(@predictions); $i++) {
  $prob = 1 / (1 + exp($A * $predictions[$i] + $B));
  if ($prob > 0.5) {
    $prediction = 1;
  } else {
    $prediction = -1;
  }
  printf("%s\t%s\t%s\t%g\n", $names[$i], $prediction, $predictions[$i], $prob);
}

sub read_file_column {
  my($column, $infile) = @_;
  my($header, $titles, @values);

  # Read the weights and the true classes.
  open($infile, "<$infile") || die("Can't open $infile.\n");

  # Skip comment and labels.
  $first_char = "#";
  $header = "";
  while ($first_char eq "#") {
    $line = <$infile>;
    $first_char = substr($line, 0, 1);
    if ($first_char eq "#") {
      $header .= $line;
    } else {
      $titles = $line;
    }
  }

  # Read the data line by line.
  while ($line = <$infile>) {
    chomp($line);

    # Store this value.
    @words = split('\t', $line);
    push(@values, $words[$column]);
  }
  close($infile);

  return($header, $titles, @values);
}
